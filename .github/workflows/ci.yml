name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 api/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 api/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest api/tests/ -v
    
    - name: Security check with bandit
      run: |
        pip install bandit
        bandit -r api/ -f json -o bandit-report.json || true

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build API image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: false
        tags: script-agent-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    runs-on: ubuntu-latest
    needs: docker-build
    
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
      
      neo4j:
        image: neo4j:5-community
        ports:
          - 7474:7474
          - 7687:7687
        env:
          NEO4J_AUTH: neo4j/password
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install test dependencies
      run: |
        pip install -r api/requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Wait for services
      run: |
        sleep 30
        curl -f http://localhost:6333/health || exit 1
        curl -f http://localhost:7474 || exit 1
    
    - name: Run integration tests
      run: |
        python test_api.py
      env:
        API_BASE: http://localhost:9000
        QDRANT_URL: http://localhost:6333
        NEBULA_ADDRS: localhost:7687

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker-build, integration-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # 这里添加您的部署脚本
        # 例如：kubectl apply -f k8s/
        # 或者：docker-compose -f docker-compose.prod.yml up -d
